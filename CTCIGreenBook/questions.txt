________________________

    ARRAYS AND STRINGS
________________________

1.1     Is Unique: Implement an algorithm to determine if a string has all unique characters. 
        What if you cannot use additional data structures?
        Hints: #44, # 777, # 732

1.2     Check Permutation: Given two strings, write a method to decide if one is a permutation of the other.
        Hints: #7, #84, #722, #737

1.3     URLify: Write a method to replace all spaces in a string with '%20: You may assume that the string has sufficient space
        at the end to hold the additional characters, and that you are given the "true" length of the string. 
        (Note: If implementing in Java, please use a character array so that you can perform this operation in place.)
        EXAMPLE:
            Input: "Mr John Smith " J 13 Output: "Mr%20J ohn%20Smith" Hints: #53, #7 78

1.4     Palindrome Permutation: Given a string, write a function to check if it is a permutation of a palin- drome. 
        A palindrome is a word or phrase that is the same forwards and backwards. A permutation is a rearrangement of letters.
        The palindrome does not need to be limited to just dictionary words.
        EXAMPLE:
            Input: Tact Coa
            Output: True (permutations: "taco cat". "atco cta". etc.) Hints: #106, #121, #134, #136

1.5     One Away: There are three types of edits that can be performed on strings: insert a character, remove a character, 
        or replace a character. Given two strings, write a function to check if they are one edit (or zero edits) away.
        EXAMPLE
            pale, pIe -> true 
            pales, pale -> true 
            pale, bale -> true 
            pale, bake -> false 
        Hints: #23, #97, #130

1.6     String Compression: Implement a method to perform basic string compression using the counts of repeated characters. 
        For example, the string aabcccccaaa would become a2b1c5a3. If the "compressed" string would not become smaller than 
        the original string, your method should return the original string. You can assume the string has only uppercase and 
        lowercase letters (a - z).
        Hints: #92, # 110

1.7     Rotate Matrix: Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, 
        write a method to rotate the image by 90 degrees. (an you do this in place?
        Hints: #51, #100

1.8     Zero Matrix: Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to O.
        Hints: # 17, #74, #102

1.9     String Rotation: Assume you have amethod isSubstring which checks ifone word is asubstring of another. 
        Given two strings, 51 and 52, write code to check if 52 is a rotation of 51 using only one call to isSubstring 
        (e.g.,"waterbottle"is a rotation of"erbottlewat").
        Hints: #34, #88, #104

Additional Questions: 
Object-Oriented Design (#7.12), 
Recursion (#8.3), Sorting and Searching (#10.9), (++ (#12.11), 
Moderate Problems (#16.8, #16.17, #16.22), 
Hard Problems (#17.4, #17.7, #17.13, #17.22, #17.26).
Hints start on page 653.
____________________
  
    LINKED LISTS
____________________

2.1     Remove Dups: Write code to remove duplicates from an unsorted linked list. 
        FOLLOW UP How would you solve this problem if a temporary buffer is not allowed? 
        Hints: #9, #40

2.2     Return Kth to Last: Implement an algorithm to find the kth to last element of a singly linked list.
        Hints: #8, #25, #47, #67, # 726

2.3     Delete Middle Node: Implement an algorithm to delete a node in the middle (i.e., any node but the first and last node,
        not necessarily the exact middle) of a singly linked list, given only access to that node.
        EXAMPLE:
            Input: the node c from the linked list a - >b- >c - >d - >e- >f
            Result: nothing is returned, but the new linked list looks like a - >b- >d - >e- >f Hints: #72

2.4     Partition: Write code to partition a linked list around a value x, such that all nodes less than x come before all 
        nodes greater than or equal to x. lf x is contained within the list, the values of x only need to be after the elements 
        less than x (see below).The partition element x can appear anywhere in the "right partition"; it does not need to appear 
        between the left and right partitions.
        EXAMPLE:
            Input: 3 -> 5 -> 8 -> 5 ->10 -> 2 -> 1[partition=5) 
            Output: 3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8
        Hints: #3, #24

2.5     Sum Lists: You have two numbers represented by a linked list, where each node contains a single digit. The digits are 
        stored in reverse order, such that the 1's digit is at the head of the list. Write a function that adds the two numbers 
        and returns the sum as a linked list.
        EXAMPLE:
            Input: (7-) 1 -) 6) + (5 -) 9 -) 2).Thatis,617 + 295. Output: 2 -) 1 -) 9.That is, 912.
        FOLLOW UP Suppose the digits are stored in forward order. Repeat the above problem. 
        EXAMPLE:
            Input: (6 -) 1 -) 7) + (2 -) 9 -) 5).Thatis,617 + 295. Output: 9 -) 1 -) 2.That is, 912.
        Hints: #7, #30, #71, #95, #109

2.6     Palindrome: Implement a function to check if a linked list is a palindrome.
        Hints: #5, #13, #29, #61, #101

2.7     Intersection: Given two (singly) linked lists, determine if the two lists intersect. Return the inter- secting node. 
        Note that the intersection is defined based on reference, not value. That is, if the kth node of the first linked list 
        is the exact same node (by reference) as the jth node of the second linked list, then they are intersecting.
        Hints: #20, #45, #55, #65, #76, #93, #111, #120, #129

2.8     Loop Detection: Given a circular linked list, implement an algorithm that returns the node at the beginning of the loop.
        DEFINITION Circular linked list: A (corrupt) linked list in which a node's next pointer points to an earlier node, 
        so as to make a loop in the linked list.
        EXAMPLE:
            Input: A -) B -) C -) 0 -) E -) C[thesameCasearlierl Output: C
            Hints: #50, #69, #83, #90

Additional Questions: 
Trees and Graphs (#4.3), 
Object-Oriented Design (#7.12), 
System Design and Scal- ability (#9.5), 
Moderate Problems (#16.25), 
Hard Problems (#17.12).
Hints start on page 653.

________________________

    STACKS AND QUEUES
________________________

3.1     Three in One: Describe how you could use a single array to implement three stacks. 
        Hints: #2, #72, #38, #58

3.2     Stack Min: How would you design a stack which, in addition to push and pop, has a function min which returns the minimum 
        element? Push, pop and min should all operate in 0(1) time.
        Hints: #27, #59, #78

3.3     Stack of Plates: Imagine a (literal) stack of plates. If the stack gets too high, it might topple. Therefore, in real 
        life, we would likely start a new stack when the previous stack exceeds some threshold. Implement a data structure 
        SetOfStacks that mimics this. SetOfStacks should be composed of several stacks and should create a new stack once the 
        previous one exceeds capacity. SetOfStacks. push () and SetOfStacks. pop () should behave identically to a single stack 
        (that is, pop ( ) should return the same values as it would if there were just a single stack).
        FOLLOW UP Implement a function popAt(int index) which performs a pop operation on a specific sub-stack. 
        Hints: #64, #87

3.4     Queue via Stacks: Implement a MyQueue class which implements a queue using two stacks.
        Hints: #98, #7 74

3.5     Sort Stack: Write a program to sort a stack such that the smallest items are on the top. You can use an additional 
        temporary stack, but you may not copy the elements into any other data structure (such as an array). The stack supports 
        the following operations: push, pop, peek, and isEmpty.
        Hints: # 75, #32, #43

3.6     Animal Shelter: An animal shelter, which holds only dogs and cats, operates on a strictly"first in, first out" basis. 
        People must adopt either the "oldest" (based on arrival time) of all animals at the shelter, or they can select whether 
        they would prefer a dog or a cat (and will receive the oldest animal of that type). They cannot select which specific 
        animal they would like. Create the data structures to maintain this system and implement operations such as enqueue, 
        dequeueAny, dequeueDog, and dequeueCat. You may use the built-in Linked L is t data structure.
        Hints: #22, #56, #63

Additional Questions: 
Linked Lists (#2.6), 
Moderate Problems (#16.26), 
Hard Problems (#17.9). 
Hints start on page 653.

